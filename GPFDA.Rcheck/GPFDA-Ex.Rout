
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "GPFDA"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "GPFDA-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('GPFDA')

Attaching package: ‘GPFDA’

The following object is masked from ‘package:datasets’:

    co2

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("D2")
> ### * D2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: D2
> ### Title: Second derivative of the likelihood
> ### Aliases: D2
> 
> ### ** Examples
> 
> ## This function is used in the vignette 'co2':
> # vignette("co2", package = "GPFDA")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("D2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("calcScaleDistMats")
> ### * calcScaleDistMats
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: calcScaleDistMats
> ### Title: Calculate matrices for NSGP covariance function
> ### Aliases: calcScaleDistMats
> 
> ### ** Examples
> 
> ## See examples in vignette:
> # vignette("nsgpr", package = "GPFDA")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("calcScaleDistMats", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gpfr")
> ### * gpfr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gpfr
> ### Title: Gaussian Process for functional data
> ### Aliases: gpfr
> 
> ### ** Examples
> 
> ## See examples in vignette:
> # vignette("gpfr", package = "GPFDA")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gpfr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gpfrPredict")
> ### * gpfrPredict
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gpfrPredict
> ### Title: Prediction of GPFR model
> ### Aliases: gpfrPredict
> 
> ### ** Examples
> 
> ## See examples in vignette:
> # vignette("gpfr", package = "GPFDA")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gpfrPredict", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gpr")
> ### * gpr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gpr
> ### Title: Gaussian Process regression
> ### Aliases: gpr
> 
> ### ** Examples
> 
> ## See examples in vignettes:
> 
> # vignette("gpr_ex1", package = "GPFDA")
> # vignette("gpr_ex2", package = "GPFDA")
> # vignette("co2", package = "GPFDA")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gpr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gprPredict")
> ### * gprPredict
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gprPredict
> ### Title: Prediction using Gaussian Process
> ### Aliases: gprPredict
> 
> ### ** Examples
> 
> ## See examples in vignettes:
> 
> # vignette("gpr_ex1", package = "GPFDA")
> # vignette("gpr_ex2", package = "GPFDA")
> # vignette("co2", package = "GPFDA")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gprPredict", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mat2fd")
> ### * mat2fd
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mat2fd
> ### Title: Create an 'fd' object from a matrix
> ### Aliases: mat2fd
> 
> ### ** Examples
> 
> require(fda)
Loading required package: fda
Loading required package: Matrix

Attaching package: ‘fda’

The following object is masked from ‘package:graphics’:

    matplot

> ry <- rnorm(20, sd=10)
> y1 <- matrix(NA, ncol=100, nrow=20)
> for(i in 1:20)  y1[i,] <- sin(seq(-1,pi,len=100))*ry[i]
> 
> y1fd <- mat2fd(y1)
> y1fd <- mat2fd(y1,list(lambda=1))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mat2fd", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:fda’, ‘package:Matrix’

> nameEx("mgpCovMat")
> ### * mgpCovMat
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mgpCovMat
> ### Title: Calculate a multivariate Gaussian processes covariance matrix
> ###   given a vector of hyperparameters
> ### Aliases: mgpCovMat
> 
> ### ** Examples
> 
> ## See examples in vignette:
> # vignette("mgpr", package = "GPFDA")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mgpCovMat", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mgpr")
> ### * mgpr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mgpr
> ### Title: Multivariate Gaussian process regression
> ### Aliases: mgpr
> 
> ### ** Examples
> 
> ## See examples in vignette:
> # vignette("mgpr", package = "GPFDA")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mgpr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mgprPredict")
> ### * mgprPredict
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mgprPredict
> ### Title: Prediction of multivariate Gaussian process
> ### Aliases: mgprPredict
> 
> ### ** Examples
> 
> ## See examples in vignette:
> # vignette("mgpr", package = "GPFDA")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mgprPredict", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("nsgpCovMat")
> ### * nsgpCovMat
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: nsgpCovMat
> ### Title: Calculate a NSGP covariance matrix given a vector of
> ###   hyperparameters
> ### Aliases: nsgpCovMat
> 
> ### ** Examples
> 
> ## See examples in vignette:
> # vignette("nsgpr", package = "GPFDA")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("nsgpCovMat", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("nsgpr")
> ### * nsgpr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: nsgpr
> ### Title: Estimation of a nonseparable and/or nonstationary covariance
> ###   structure
> ### Aliases: nsgpr
> 
> ### ** Examples
> 
> ## See examples in vignette:
> # vignette("nsgpr", package = "GPFDA")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("nsgpr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("nsgprPredict")
> ### * nsgprPredict
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: nsgprPredict
> ### Title: NSGP predicion given a vector of hyperparameters
> ### Aliases: nsgprPredict
> 
> ### ** Examples
> 
> ## See examples in vignette:
> # vignette("nsgpr", package = "GPFDA")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("nsgprPredict", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.gpfr")
> ### * plot.gpfr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.gpfr
> ### Title: Plot GPFR model for either training or prediction
> ### Aliases: plot.gpfr
> 
> ### ** Examples
> 
> ## See examples in vignette:
> # vignette("gpfr", package = "GPFDA")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.gpfr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.gpr")
> ### * plot.gpr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.gpr
> ### Title: Plot Gaussian Process regression - training and prediction
> ### Aliases: plot.gpr
> 
> ### ** Examples
> 
> ## See examples in vignette:
> # vignette("gpr_ex1", package = "GPFDA")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.gpr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.mgpr")
> ### * plot.mgpr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.mgpr
> ### Title: Plot predictions of a multivariate Gaussian Process regression
> ###   model
> ### Aliases: plot.mgpr
> 
> ### ** Examples
> 
> ## See examples in vignette:
> # vignette("mgpr", package = "GPFDA")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.mgpr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plotImage")
> ### * plotImage
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plotImage
> ### Title: Draw an image plot for a given two-dimensional input
> ### Aliases: plotImage
> 
> ### ** Examples
> 
> ## See examples in vignette:
> # vignette("gpr_ex2", package = "GPFDA")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plotImage", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plotmgpCovFun")
> ### * plotmgpCovFun
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plotmgpCovFun
> ### Title: Plot auto- or cross-covariance function of a multivariate
> ###   Gaussian process
> ### Aliases: plotmgpCovFun
> 
> ### ** Examples
> 
> ## See examples in vignette:
> # vignette("mgpr", package = "GPFDA")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plotmgpCovFun", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("unscaledCorr")
> ### * unscaledCorr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: unscaledCorr
> ### Title: Calculate an unscaled NSGP correlation matrix
> ### Aliases: unscaledCorr
> 
> ### ** Examples
> 
> ## See examples in vignette:
> # vignette("nsgpr", package = "GPFDA")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("unscaledCorr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.94 0.852 2.381 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
