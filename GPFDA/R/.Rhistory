getwd()
?as.spam
??as.spam
?svd
D=toeplitz(1:4)
D
D=toeplitz(1/(1:4))
D
log(prod(D))
sum(log(D))
L=chol(D)
L
2*log(prod(diag(L)))
2*sum(log(diag(L)))
2*log(prod(diag(L)))
2*sum(log(diag(L)))
L
det(D)
determinant(D, logarithm = T)
library("GPFDA")
mymatrix2
GPFDA:::mymatrix2
n <- 1000
x <- seq(0,1,len=n)
hp <- list('pow.ex.w'=log(10),'pow.ex.v'=log(1))
nu <- exp(hp$pow.ex.v)
A <- as.matrix(exp(hp$pow.ex.w))
# GPFDA package -----------------------------------------------------------
library("GPFDA")
SigmaGPFDA <- cov.pow.ex(hp, x, gamma=1)
library("rbenchmark")
Sigma <- CovPowExpRcpp(X=as.matrix(x), gam=2,
nu=nu, A=A, sig=0, jit=1e-8)
library("Rcpp")
library("inline")
source("SigmaRcpp2.R")
getwd()
getwd()
library("GPFDA")
require("MASS")
library("useful")
library("rbenchmark")
library("Rcpp")
library("inline")
n <- 1000 # training set size + test set size
nSamples <- 1
# hp <- list('linear.a'=log(10), 'pow.ex.v'=log(5),'pow.ex.w'=log(10),'vv'=log(1))
hp <- list('pow.ex.v'=log(2),'pow.ex.w'=log(100),'vv'=log(0.3))
h <- seq(0,1,len=n)
idx <- sort(sample(1:n,floor(n/2)))
X <- as.matrix(h[idx])
# Y <- (mvrnorm(n=n,mu=h-h,Sigma=(cov.linear(hp,h)+cov.pow.ex(hp,h)))[,1]) # *0.1+sin(h*6)
Sigma <- cov.pow.ex(hp,h)
diag(Sigma) <- diag(Sigma) + exp(hp$vv)
source("gp.functions5NEW.R")
source("covMatern.R")
cc <- exp(hp$pow.ex.v)
nu <- 0.5
cc <- exp(hp$pow.ex.v)
nu <- 0.5
A <- as.matrix(exp(hp$pow.ex.w))
nu <- 0.5
SigmaRcpp <- CovMaternCpp_sq(X=as.matrix(h), cc = cc, A = A, nu = nu)
corner(Sigma)
corner(SigmaRcpp)
nu <- 5
SigmaRcpp <- CovMaternCpp_sq(X=as.matrix(h), cc = cc, A = A, nu = nu)
corner(Sigma)
corner(SigmaRcpp)
nu <- 10
SigmaRcpp <- CovMaternCpp_sq(X=as.matrix(h), cc = cc, A = A, nu = nu)
corner(Sigma)
corner(SigmaRcpp)
ts.plot(Sigma[1,])
# Y <- (mvrnorm(n=n,mu=h-h,Sigma=(cov.linear(hp,h)+cov.pow.ex(hp,h)))[,1]) # *0.1+sin(h*6)
Sigma <- cov.pow.ex(hp,h)
source("xixj_staNEW_sq.R")
source("xixj_staNEW.R")
source("xixjNEW_sq.R")
source("xixjNEW.R")
# Y <- (mvrnorm(n=n,mu=h-h,Sigma=(cov.linear(hp,h)+cov.pow.ex(hp,h)))[,1]) # *0.1+sin(h*6)
Sigma <- cov.pow.ex(hp,h)
n <- 1000 # training set size + test set size
nSamples <- 1
# hp <- list('linear.a'=log(10), 'pow.ex.v'=log(5),'pow.ex.w'=log(10),'vv'=log(1))
hp <- list('pow.ex.v'=log(2),'pow.ex.w'=log(100),'vv'=log(0.3))
h <- seq(0,1,len=n)
idx <- sort(sample(1:n,floor(n/2)))
X <- as.matrix(h[idx])
# Y <- (mvrnorm(n=n,mu=h-h,Sigma=(cov.linear(hp,h)+cov.pow.ex(hp,h)))[,1]) # *0.1+sin(h*6)
Sigma <- cov.pow.ex(hp,h)
hp
h
rm(list = ls())
# rm(list = ls())
library("GPFDA")
require("MASS")
library("useful")
library("rbenchmark")
library("Rcpp")
library("inline")
n <- 1000 # training set size + test set size
nSamples <- 1
# hp <- list('linear.a'=log(10), 'pow.ex.v'=log(5),'pow.ex.w'=log(10),'vv'=log(1))
hp <- list('pow.ex.v'=log(2),'pow.ex.w'=log(100),'vv'=log(0.3))
h <- seq(0,1,len=n)
idx <- sort(sample(1:n,floor(n/2)))
X <- as.matrix(h[idx])
# Y <- (mvrnorm(n=n,mu=h-h,Sigma=(cov.linear(hp,h)+cov.pow.ex(hp,h)))[,1]) # *0.1+sin(h*6)
Sigma <- cov.pow.ex(hp,h)
source("gp.functions5NEW.R")
source("covMatern.R")
cc <- exp(hp$pow.ex.v)
A <- as.matrix(exp(hp$pow.ex.w))
nu <- 10
SigmaRcpp <- CovMaternCpp_sq(X=as.matrix(h), cc = cc, A = A, nu = nu)
corner(Sigma)
corner(SigmaRcpp)
ts.plot(Sigma[1,])
ts.plot(SigmaRcpp[1,])
n <- 100 # training set size + test set size
nSamples <- 1
# hp <- list('linear.a'=log(10), 'pow.ex.v'=log(5),'pow.ex.w'=log(10),'vv'=log(1))
hp <- list('pow.ex.v'=log(2),'pow.ex.w'=log(100),'vv'=log(0.3))
h <- seq(0,1,len=n)
idx <- sort(sample(1:n,floor(n/2)))
X <- as.matrix(h[idx])
# Y <- (mvrnorm(n=n,mu=h-h,Sigma=(cov.linear(hp,h)+cov.pow.ex(hp,h)))[,1]) # *0.1+sin(h*6)
Sigma <- cov.pow.ex(hp,h)
rm(list = ls())
# rm(list = ls())
library("GPFDA")
require("MASS")
library("useful")
library("rbenchmark")
library("Rcpp")
library("inline")
n <- 100 # training set size + test set size
nSamples <- 1
# hp <- list('linear.a'=log(10), 'pow.ex.v'=log(5),'pow.ex.w'=log(10),'vv'=log(1))
hp <- list('pow.ex.v'=log(2),'pow.ex.w'=log(100),'vv'=log(0.3))
h <- seq(0,1,len=n)
idx <- sort(sample(1:n,floor(n/2)))
X <- as.matrix(h[idx])
# Y <- (mvrnorm(n=n,mu=h-h,Sigma=(cov.linear(hp,h)+cov.pow.ex(hp,h)))[,1]) # *0.1+sin(h*6)
Sigma <- cov.pow.ex(hp,h)
source("gp.functions5NEW.R")
source("covMatern.R")
rm(list = ls())
library("GPFDA")
require("MASS")
library("useful")
library("rbenchmark")
library("Rcpp")
library("inline")
n <- 100 # training set size + test set size
nSamples <- 1
# hp <- list('linear.a'=log(10), 'pow.ex.v'=log(5),'pow.ex.w'=log(10),'vv'=log(1))
hp <- list('pow.ex.v'=log(2),'pow.ex.w'=log(100),'vv'=log(0.3))
h <- seq(0,1,len=n)
idx <- sort(sample(1:n,floor(n/2)))
X <- as.matrix(h[idx])
# Y <- (mvrnorm(n=n,mu=h-h,Sigma=(cov.linear(hp,h)+cov.pow.ex(hp,h)))[,1]) # *0.1+sin(h*6)
Sigma <- cov.pow.ex(hp,h)
source("covMatern.R")
cc <- exp(hp$pow.ex.v)
A <- as.matrix(exp(hp$pow.ex.w))
nu <- 10
SigmaRcpp <- CovMaternCpp_sq(X=as.matrix(h), cc = cc, A = A, nu = nu)
corner(Sigma)
corner(SigmaRcpp)
ts.plot(Sigma[1,])
ts.plot(SigmaRcpp[1,])
ts.plot(Sigma[1,])
ts.plot(SigmaRcpp[1,])
nu <- 15
SigmaRcpp <- CovMaternCpp_sq(X=as.matrix(h), cc = cc, A = A, nu = nu)
corner(Sigma)
corner(SigmaRcpp)
nu <- 30
SigmaRcpp <- CovMaternCpp_sq(X=as.matrix(h), cc = cc, A = A, nu = nu)
corner(Sigma)
corner(SigmaRcpp)
nu <- 0.5
SigmaRcpp <- CovMaternCpp_sq(X=as.matrix(h), cc = cc, A = A, nu = nu)
corner(Sigma)
corner(SigmaRcpp)
# Y <- (mvrnorm(n=n,mu=h-h,Sigma=(cov.linear(hp,h)+cov.pow.ex(hp,h)))[,1]) # *0.1+sin(h*6)
gamma <- 1 # 1 for SqExp
Sigma <- cov.pow.ex(hp,h, gamma = gamma)
cc <- exp(hp$pow.ex.v)
A <- as.matrix(exp(hp$pow.ex.w))
nu <- 0.5
SigmaRcpp <- CovMaternCpp_sq(X=as.matrix(h), cc = cc, A = A, nu = nu)
corner(Sigma)
corner(SigmaRcpp)
cc <- exp(hp$pow.ex.v)
A <- as.matrix(exp(hp$pow.ex.w))
nu <- 5
SigmaRcpp <- CovMaternCpp_sq(X=as.matrix(h), cc = cc, A = A, nu = nu)
corner(Sigma)
corner(SigmaRcpp)
# Y <- (mvrnorm(n=n,mu=h-h,Sigma=(cov.linear(hp,h)+cov.pow.ex(hp,h)))[,1]) # *0.1+sin(h*6)
gamma <- 2 # 1 for SqExp
Sigma <- cov.pow.ex(hp,h, gamma = gamma)
cov.pow.ex
cc <- exp(hp$pow.ex.v)
A <- as.matrix(exp(hp$pow.ex.w))
nu <- 5
SigmaRcpp <- CovMaternCpp_sq(X=as.matrix(h), cc = cc, A = A, nu = nu)
corner(Sigma)
corner(SigmaRcpp)
cov.pow.ex
# Y <- (mvrnorm(n=n,mu=h-h,Sigma=(cov.linear(hp,h)+cov.pow.ex(hp,h)))[,1]) # *0.1+sin(h*6)
gamma <- 0.5 # 1 for SqExp
Sigma <- cov.pow.ex(hp,h, gamma = gamma)
ts.plot(Sigma[1,])
n <- 100 # training set size + test set size
nSamples <- 1
# hp <- list('linear.a'=log(10), 'pow.ex.v'=log(5),'pow.ex.w'=log(10),'vv'=log(1))
hp <- list('pow.ex.v'=log(2),'pow.ex.w'=log(10),'vv'=log(0.3))
h <- seq(0,1,len=n)
idx <- sort(sample(1:n,floor(n/2)))
X <- as.matrix(h[idx])
# Y <- (mvrnorm(n=n,mu=h-h,Sigma=(cov.linear(hp,h)+cov.pow.ex(hp,h)))[,1]) # *0.1+sin(h*6)
gamma <- 0.5 # 1 for SqExp
Sigma <- cov.pow.ex(hp,h, gamma = gamma)
cc <- exp(hp$pow.ex.v)
nu <- 1
SigmaRcpp <- CovMaternCpp_sq(X=as.matrix(h), cc = cc, A = A, nu = nu)
corner(Sigma)
corner(SigmaRcpp)
ts.plot(Sigma[1,])
ts.plot(SigmaRcpp[1,])
nu <- 0.5
SigmaRcpp <- CovMaternCpp_sq(X=as.matrix(h), cc = cc, A = A, nu = nu)
corner(Sigma)
corner(SigmaRcpp)
ts.plot(Sigma[1,])
ts.plot(SigmaRcpp[1,])
source("CovMaternCpp_sq.R")
source("CovMaternCpp.R")
cc <- exp(hp$pow.ex.v)
A <- as.matrix(exp(hp$pow.ex.w))
nu <- 0.5
SigmaRcpp <- CovMaternCpp_sq(X=as.matrix(h), cc = cc, A = A, nu = nu)
corner(Sigma)
corner(SigmaRcpp)
SigmaRcpp <- CovMaternCpp(X=as.matrix(h), Xnew=as.matrix(h), cc = cc, A = A, nu = nu)
SigmaRcpp <- CovMaternCpp_sq(X=as.matrix(h), cc = cc, A = A, nu = nu)
SigmaRcpp_nm <- CovMaternCpp(X=as.matrix(h), Xnew=as.matrix(h), cc = cc, A = A, nu = nu)
dim(SigmaRcpp_nm)
corner(SigmaRcpp_nm)
corner(SigmaRcpp)
corner(SigmaRcpp_nm)
SigmaRcpp_nm <- CovMaternCpp(X=as.matrix(h), Xnew=as.matrix(h[1:15]), cc = cc, A = A, nu = nu)
corner(Sigma)
corner(SigmaRcpp)
corner(SigmaRcpp_nm)
ts.plot(SigmaRcpp[1,])
ts.plot(SigmaRcpp_nm[1,])
ts.plot(SigmaRcpp[1,1:15])
ts.plot(SigmaRcpp_nm[1,])
warning("ATTENTION: hp names need to be changed")
GPFDA:::cov.linear()
GPFDA:::cov.linear
library("GPFDA")
require("MASS")
library("useful")
library("rbenchmark")
library("Rcpp")
library("inline")
library("GPFDA")
require("MASS")
library("useful")
library("rbenchmark")
library("Rcpp")
library("inline")
hp <- list('pow.ex.w'=rep(log(10),4),'linear.a'=rep(log(10),4),'pow.ex.v'=log(5),'vv'=log(1))
hp <- list('pow.ex.w'=rep(log(10),4),'linear.a'=rep(log(10),4),'pow.ex.v'=log(5),'vv'=log(1))
kernel <- c('linear','pow.ex')
hp
hp <- list('pow.ex.w'=rep(log(10),4),'linear.a'=rep(log(10),4),'pow.ex.v'=log(5),'vv'=log(1))
kernel <- c('linear','pow.ex')
nn=100; # training sample size
mm=1000; # testing sample size
p=dnorm((rnorm(800)))
idx=sort(sample(1:800,nn,prob=p/sum(p)))
X=matrix(0,ncol=4,nrow=800)
X[,1]=seq(-5,10,len=800)
X[,2]=seq(0,1,len=800)
X[,3]=seq(-15,-10,len=800)
X[,4]=seq(1,2,len=800)
nn=100; # training sample size
mm=1000; # testing sample size
p=dnorm((rnorm(800)))
idx=sort(sample(1:800,nn,prob=p/sum(p)))
X=matrix(0,ncol=4,nrow=800)
X[,1]=seq(-5,10,len=800)
X[,2]=seq(0,1,len=800)
X[,3]=seq(-15,-10,len=800)
X[,4]=seq(1,2,len=800)
Y=(mvrnorm(n=800,
mu=as.matrix(X[,1]-X[,1]),
Sigma=(cov.linear(hp,X)+cov.pow.ex(hp,X)))[,1])*0.002+
(0.2*sign(X[,1])*abs(X[,1])^(1/3)-4*sin(X[,2])+exp(X[,3])+log(X[,4]))*3
X=X[idx,];Y=as.matrix(Y[idx])
x=matrix(0,ncol=4,nrow=mm)
x[,1]=seq(-5,10,len=mm)
x[,2]=seq(0,1,len=mm)
x[,3]=seq(-15,-10,len=mm)
x[,4]=seq(1,2,len=mm)
a=gpr(X,Y,kernel,trace=2)
b=gppredict(a,x)
upper=b$pred.mean+1.96*b$pred.sd
lower=b$pred.mean-1.96*b$pred.sd
plot(-100,-100,col=0,xlim=range(x[,1]),ylim=c(min(upper,lower,Y)-0.1*abs(min(upper,lower,Y)),max(upper,lower,Y)+0.1*abs(max(upper,lower,Y))),main="Prediction", xlab="input ( x )",ylab="response")
polygon(c(x[,1], rev(x[,1])), c(upper, rev(lower)),col = "grey60", border = NA)
points(X[,1],Y,pch=4,col=2,cex=0.8)
lines(x[,1],b$pred.mean,col=4,lwd=1.5)
GPFDA::gpr
Data=X
response=Y
Cov=kernel;  hyper = NULL;
NewHyper = NULL; mean = 0; gamma = 1; itermax = 100; reltol = 8e-10;
trace = 0
Data=as.matrix(Data)
y.original=response
response=as.matrix(response)
is.null(hyper)
if(is.null(hyper)){
hyper=list()
if(any(Cov=='linear'))
#  hyper$linear.a=rep(log(0.01),dim(Data)[2])
hyper$linear.a=rnorm(dim(Data)[2],sd=0.01)
if(any(Cov=='pow.ex')){
#  hyper$pow.ex.v=log(1)
#  hyper$pow.ex.w=rep(log(10),dim(Data)[2])
hyper$pow.ex.v=rnorm(1,sd=0.01)
hyper$pow.ex.w=-(abs(rnorm(dim(Data)[2],sd=0.01)))
}
if(any(Cov=='rat.qu')){
#  hyper$rat.qu.w=rep(log(1),dim(Data)[2])
#  hyper$rat.qu.s=log(1.5)
#  hyper$rat.qu.a=log(1.5)
hyper$rat.qu.w=abs(rnorm(dim(Data)[2],sd=0.01))
hyper$rat.qu.s=runif(1,0.01,0.5)
hyper$rat.qu.a=runif(1,0.01,0.5)
}
hyper$vv=sample(x=c(0.2,0.5,1,1.5),1)
hyper.nam=names(hyper)
if(!is.null(NewHyper)){
hyper.nam=c(hyper.nam,NewHyper)
nh.length=length(NewHyper)
for(i in 1:nh.length){
hyper=c(hyper,runif(1,-1,1))
}
names(hyper)=hyper.nam
}
}
hyper
!is.null(hyper)
if(!is.null(hyper)){
hyper=hyper[substr(names(hyper),1,6)%in%c(Cov,'vv')]
}
hyper
hp.name=names(unlist(hyper))
hp.name
if(mean==0) {response=response; mean=0;lrm=0}
if(mean==1) {mean=mean(response);response=as.matrix(response-mean);lrm=1}
if(mean=='t') {
trend=data.frame(yyy=response,xxx=Data[,1])
lrm=lm(yyy~xxx,data=trend);
response=as.matrix(resid(lrm));
mean=fitted(lrm)
}
trace=round(trace)
if(trace>0)
cat(c('\n','title: -likelihood:',hp.name,'\n'),sep='     ')
cat(c('\n','title: -likelihood:',hp.name,'\n'),sep='     ')
trace
hyper
unlist(hyper)
## run gpr until nlmnib and then
hyper.p=unlist(hyper)
Data=X; response=Y; Cov=kernel; gamma=1
## run gpr until nlmnib and then
(hyper.p=unlist(hyper))
Data=X; response=Y; Cov=kernel; gamma=1
Data=as.matrix(Data)
datadim=dim(Data)
hyper.p
hp.class=substr(names(hyper.p),1,8)
kernel.class=unique(substr(names(hyper.p),1,6))
hp.class=data.frame(class=hp.class,hp=hyper.p)
names(hp.class)=c('class','hp')
hp.list=split(hp.class$hp,hp.class$class)
hp.list
hyper.p=hp.list
hyper.p
n=length(Cov)
CovList=vector('list',n)
CovList
for(i in 1:n) CovList[i]=list(paste0('cov.',Cov[i]))
CovList
j=2
get(j)
get(CovList)
get(CovList)[[1]]
get(CovList)[1]
CovList
get(CovList[[1]])
xixj
get(CovList[[2]])
xixj_sta
n=length(Cov)
CovList=vector('list',n)
for(i in 1:n) CovList[i]=list(paste0('cov.',Cov[i]))
CovList
get(CovList[[2]])
CovList
hyper.p
Dfx=lapply(seq_along(hyper.p),function(i){
Dp=hyper.p[i];
name.Dp=names(Dp)
f=get(paste0('DCov.',name.Dp))
if(name.Dp%in%c('pow.ex.w','pow.ex.v') )
Dpara=f(hyper.p,Data,AlphaQ,gamma=gamma)
if(name.Dp=='vv')
Dpara=f(hyper.p,Alpha,invQ)
if(!name.Dp%in%c('pow.ex.w','pow.ex.v','vv'))
Dpara=f(hyper.p,Data,AlphaQ)
return(Dpara)
})
hyper.p
hp.class=substr(names(hyper.p),1,8)
kernel.class=unique(substr(names(hyper.p),1,6))
hp.class=data.frame(class=hp.class,hp=hyper.p)
names(hp.class)=c('class','hp')
hyper.p=split(hp.class$hp,hp.class$class)
hyper.p
hyper.p
hyper
## run gpr until nlmnib and then
(hyper.p=unlist(hyper))
hyper.p
hp.class=substr(names(hyper.p),1,8)
kernel.class=unique(substr(names(hyper.p),1,6))
hp.class=data.frame(class=hp.class,hp=hyper.p)
names(hp.class)=c('class','hp')
split(hp.class$hp,hp.class$class)
hyper.p=split(hp.class$hp,hp.class$class)
hyper.p
n=length(Cov)
CovList=vector('list',n)
for(i in 1:n) CovList[i]=list(paste0('cov.',Cov[i]))
CovList
hyper.p
seq_along(hyper.p)
hyper.p
hyper.p[3]
Dp = hyper.p[3]
Dp
names(Dp)
name.Dp=names(Dp)
name.Dp
paste0('DCov.',name.Dp)
f=get(paste0('DCov.',name.Dp))
get(paste0('DCov.',name.Dp))
source('~/gitreps/GPFDArevision/gp.functions5.R')
get(paste0('DCov.',name.Dp))
?GPFDA::gpr
